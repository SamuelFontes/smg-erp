// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smg_erp.Models;

#nullable disable

namespace smgerp.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221110164857_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("smg_erp.Models.Order", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("DateCanceled")
                        .HasColumnType("datetime")
                        .HasColumnName("date_canceled");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime")
                        .HasColumnName("date_closed");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_canceled")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_closed")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.HasKey("TenantId", "OrderId");

                    b.HasIndex("TenantId", "PersonId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("smg_erp.Models.OrderItem", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(19, 4)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.HasKey("TenantId", "OrderId", "ItemId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("smg_erp.Models.Person", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("DiscordUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("discord_user_id");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("TenantId", "PersonId");

                    b.HasIndex(new[] { "DiscordUserId" }, "Index_People_discord_user_id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("smg_erp.Models.PersonDocument", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("TenantId", "PersonId", "DocumentId");

                    b.ToTable("PersonDocuments");
                });

            modelBuilder.Entity("smg_erp.Models.Product", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(19, 4)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_type_id");

                    b.HasKey("TenantId", "ProductId");

                    b.HasIndex("TenantId", "ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("smg_erp.Models.ProductMedium", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("media_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("TenantId", "ProductId", "MediaId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("smg_erp.Models.ProductType", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_type_id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.HasKey("TenantId", "ProductTypeId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("smg_erp.Models.Profile", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("profile_id");

                    b.Property<string>("ProfileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("profile_name");

                    b.HasKey("TenantId", "ProfileId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("smg_erp.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("smg_erp.Models.TenantSecrect", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Secrect")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("secrect");

                    b.HasKey("TenantId");

                    b.ToTable("TenantSecrect", (string)null);
                });

            modelBuilder.Entity("smg_erp.Models.Token", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int>("TokenId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("token_id");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_date");

                    b.Property<DateTime>("LoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("login_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.HasKey("TenantId", "UserId", "TokenId");

                    b.HasIndex(new[] { "Token1" }, "Index_Tokens_token");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("smg_erp.Models.User", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<byte[]>("Hash")
                        .HasMaxLength(1)
                        .HasColumnType("BLOB")
                        .HasColumnName("hash")
                        .IsFixedLength();

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("nickname");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("salt");

                    b.HasKey("TenantId", "UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("smg_erp.Models.UserProfile", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tenant_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("profile_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "ProfileId", "UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("smg_erp.Models.Order", b =>
                {
                    b.HasOne("smg_erp.Models.Person", "Person")
                        .WithMany("Orders")
                        .HasForeignKey("TenantId", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_People");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("smg_erp.Models.OrderItem", b =>
                {
                    b.HasOne("smg_erp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("TenantId", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("smg_erp.Models.PersonDocument", b =>
                {
                    b.HasOne("smg_erp.Models.Person", "Person")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("TenantId", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_PersonDocuments_People");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("smg_erp.Models.Product", b =>
                {
                    b.HasOne("smg_erp.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("TenantId", "ProductTypeId")
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("smg_erp.Models.ProductMedium", b =>
                {
                    b.HasOne("smg_erp.Models.Product", "Product")
                        .WithMany("ProductMedia")
                        .HasForeignKey("TenantId", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductMedia_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("smg_erp.Models.TenantSecrect", b =>
                {
                    b.HasOne("smg_erp.Models.Tenant", "Tenant")
                        .WithOne("TenantSecrect")
                        .HasForeignKey("smg_erp.Models.TenantSecrect", "TenantId")
                        .IsRequired()
                        .HasConstraintName("FK_TenantSecrect_Tenants");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("smg_erp.Models.Token", b =>
                {
                    b.HasOne("smg_erp.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("TenantId", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("smg_erp.Models.UserProfile", b =>
                {
                    b.HasOne("smg_erp.Models.Profile", "Profile")
                        .WithMany("UserProfiles")
                        .HasForeignKey("TenantId", "ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_Profiles");

                    b.HasOne("smg_erp.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("TenantId", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_Users");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("smg_erp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("smg_erp.Models.Person", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PersonDocuments");
                });

            modelBuilder.Entity("smg_erp.Models.Product", b =>
                {
                    b.Navigation("ProductMedia");
                });

            modelBuilder.Entity("smg_erp.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("smg_erp.Models.Profile", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("smg_erp.Models.Tenant", b =>
                {
                    b.Navigation("TenantSecrect")
                        .IsRequired();
                });

            modelBuilder.Entity("smg_erp.Models.User", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
